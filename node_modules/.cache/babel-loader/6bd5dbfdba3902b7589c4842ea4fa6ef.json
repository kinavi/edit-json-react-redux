{"ast":null,"code":"var _jsxFileName = \"/home/vm/\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438/test_work/src/Components/React/InputField/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types'; // class InputField extends Component{\n//     constructor(props) {\n//         super(props)\n//         this.state={\n//             //value:'',\n//             strLog:'',\n//             isHide:props.isHide,\n//         }\n//         this.onChange=this.onChange.bind(this)\n//         this.switchHide=this.switchHide.bind(this)\n//         this.cleartextarea=this.cleartextarea.bind(this)\n//     }\n//     switchHide() {\n//         const {isHide} = this.state\n//         console.log(!isHide)\n//         this.setState({isHide:!isHide})\n//     }\n//     static propTypes = {\n//         strInput:PropTypes.string,\n//         strLog:PropTypes.string,\n//         isHide:PropTypes.bool\n//     }\n//     onChange(){\n//         const {value} = this.textarea\n//         const {onSetCards} = this.props\n//         const {switchHide,cleartextarea} = this\n//         if(IsJsonString(value)){\n//             const json = JSON.parse(value)\n//             cleartextarea()\n//             onSetCards(json)\n//             switchHide()\n//         }\n//         else if(value!=='')\n//         {\n//             this.setState({strLog:'Не верный формат!'})\n//         }\n//         else\n//             this.setState({strLog:''})     \n//     }\n//     getInputRef = (node)=>{this.textarea=node}\n//     cleartextarea = () => {this.textarea.value=''}\n//     render(){\n//         const {getInputRef, onChange, switchHide} = this\n//         const {strLog, isHide} = this.state\n//         return(\n//             <div>\n//                 <div hidden={isHide}>\n//                     <button onClick={switchHide}>Ввод данных</button>\n//                 </div>\n//                 <div hidden={!isHide}>\n//                     <div>Ведите данные JSON: </div>\n//                     <textarea ref={getInputRef} onInput={onChange} name=\"comment\" cols=\"40\" rows=\"3\"></textarea>\n//                     <div>{strLog}</div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\nfunction IsJsonString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n} // Old Ver.\n//()=>setCardsParseJSON(this._ref.value)\n\n\nconst InputField = ({\n  store,\n  setCardsParseJSON = f => f\n}) => {\n  let tafield,\n      onAddUser = () => {\n    store.di;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"\\u0412\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 JSON: \"), React.createElement(\"textarea\", {\n    ref: ta => tafield = ta,\n    onInput: () => setCardsParseJSON(tafield.value),\n    name: \"comment\",\n    cols: \"40\",\n    rows: \"3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: onAddUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Add\"), React.createElement(\"div\", {\n    hidden: !IsJsonString(tafield),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0432\\u0432\\u043E\\u0434\\u0430\"));\n};\n\nexport default InputField;","map":{"version":3,"sources":["/home/vm/Загрузки/test_work/src/Components/React/InputField/index.js"],"names":["React","Component","PropTypes","IsJsonString","str","JSON","parse","e","InputField","store","setCardsParseJSON","f","tafield","onAddUser","di","ta","value"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,MAAI;AACAC,IAAAA,IAAI,CAACC,KAAL,CAAWF,GAAX;AACH,GAFD,CAEE,OAAOG,CAAP,EAAU;AACR,WAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACH,C,CAED;AACA;;;AACA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,iBAAiB,GAACC,CAAC,IAAEA;AAA9B,CAAD,KAAoC;AACnD,MAAIC,OAAJ;AAAA,MAEAC,SAAS,GAAC,MAAI;AACVJ,IAAAA,KAAK,CAACK,EAAN;AACH,GAJD;;AAMA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wFADJ,EAEI;AAAU,IAAA,GAAG,EAAEC,EAAE,IAAEH,OAAO,GAACG,EAA3B;AAA+B,IAAA,OAAO,EAAE,MAAIL,iBAAiB,CAACE,OAAO,CAACI,KAAT,CAA7D;AAA8E,IAAA,IAAI,EAAC,SAAnF;AAA6F,IAAA,IAAI,EAAC,IAAlG;AAAuG,IAAA,IAAI,EAAC,GAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI;AAAQ,IAAA,OAAO,EAAEH,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAHJ,EAII;AAAK,IAAA,MAAM,EAAE,CAACV,YAAY,CAACS,OAAD,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAJJ,CADJ;AAQH,CAfD;;AAiBA,eAAeJ,UAAf","sourcesContent":["import React,{Component} from 'react';\nimport PropTypes from 'prop-types'\n\n\n\n// class InputField extends Component{\n\n//     constructor(props) {\n//         super(props)\n//         this.state={\n//             //value:'',\n//             strLog:'',\n//             isHide:props.isHide,\n//         }\n//         this.onChange=this.onChange.bind(this)\n//         this.switchHide=this.switchHide.bind(this)\n//         this.cleartextarea=this.cleartextarea.bind(this)\n//     }\n\n//     switchHide() {\n        \n//         const {isHide} = this.state\n//         console.log(!isHide)\n//         this.setState({isHide:!isHide})\n//     }\n\n//     static propTypes = {\n//         strInput:PropTypes.string,\n//         strLog:PropTypes.string,\n//         isHide:PropTypes.bool\n//     }\n\n//     onChange(){\n//         const {value} = this.textarea\n//         const {onSetCards} = this.props\n//         const {switchHide,cleartextarea} = this\n//         if(IsJsonString(value)){\n//             const json = JSON.parse(value)\n//             cleartextarea()\n//             onSetCards(json)\n//             switchHide()\n//         }\n//         else if(value!=='')\n//         {\n//             this.setState({strLog:'Не верный формат!'})\n//         }\n//         else\n//             this.setState({strLog:''})     \n//     }\n\n//     getInputRef = (node)=>{this.textarea=node}\n//     cleartextarea = () => {this.textarea.value=''}\n\n//     render(){\n//         const {getInputRef, onChange, switchHide} = this\n//         const {strLog, isHide} = this.state\n//         return(\n//             <div>\n//                 <div hidden={isHide}>\n//                     <button onClick={switchHide}>Ввод данных</button>\n//                 </div>\n//                 <div hidden={!isHide}>\n//                     <div>Ведите данные JSON: </div>\n//                     <textarea ref={getInputRef} onInput={onChange} name=\"comment\" cols=\"40\" rows=\"3\"></textarea>\n//                     <div>{strLog}</div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\nfunction IsJsonString(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n// Old Ver.\n//()=>setCardsParseJSON(this._ref.value)\nconst InputField = ({ store, setCardsParseJSON=f=>f})=>{\n    let tafield,\n\n    onAddUser=()=>{\n        store.di\n    }\n\n    return(\n        <div>\n            <div>Ведите данные JSON: </div>\n            <textarea ref={ta=>tafield=ta} onInput={()=>setCardsParseJSON(tafield.value)} name=\"comment\" cols=\"40\" rows=\"3\"></textarea>\n            <button onClick={onAddUser}>Add</button>\n            <div hidden={!IsJsonString(tafield)}>Ошибка ввода</div>\n        </div>\n    )\n}\n\nexport default InputField"]},"metadata":{},"sourceType":"module"}