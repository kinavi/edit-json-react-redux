{"ast":null,"code":"var _jsxFileName = \"/home/vm/simple_build_facebook/src/Components/InputField/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types'; //!!!НАДО ПЕРЕДЕЛАТЬ\n\nclass InputField extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getInputRef = node => {\n      this.textarea = node;\n    };\n\n    this.state = {\n      //value:'',\n      strLog: '',\n      isHide: false\n    };\n    this.onChange = this.onChange.bind(this);\n    this.switchHide = this.switchHide.bind(this); //this.show=this.show.bind(this)\n  }\n\n  switchHide() {\n    const isHide = this.state.isHide;\n    this.setState(!{\n      isHide\n    });\n  } // show() {\n  //     const hidden = false\n  //     this.setState({hidden})\n  // }\n\n\n  onChange() {\n    const value = this.textarea.value;\n    const onSetCards = this.props.onSetCards;\n    const switchHide = this.switchHide;\n\n    if (IsJsonString(value)) {\n      const json = JSON.parse(value);\n      onSetCards(json);\n      switchHide();\n    } else if (value !== '') {\n      this.setState({\n        strLog: 'Не верный формат!'\n      });\n    } else this.setState({\n      strLog: ''\n    });\n  }\n\n  render() {\n    const getInputRef = this.getInputRef,\n          onChange = this.onChange,\n          switchHide = this.switchHide;\n    const _this$state = this.state,\n          strLog = _this$state.strLog,\n          isHide = _this$state.isHide;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      hidden: isHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: switchHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"\\u0412\\u0432\\u043E\\u0434 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445\")), React.createElement(\"div\", {\n      hidden: !isHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"\\u0412\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435 JSON: \"), React.createElement(\"textarea\", {\n      ref: getInputRef,\n      onInput: onChange,\n      name: \"comment\",\n      cols: \"40\",\n      rows: \"3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, strLog)));\n  }\n\n}\n\nInputField.propTypes = {\n  strInput: PropTypes.string,\n  strLog: PropTypes.string,\n  isHide: PropTypes.bool\n};\n\nfunction IsJsonString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n} // Old Ver.\n//()=>setCardsParseJSON(this._ref.value)\n// const InputField = ({ setCardsParseJSON=f=>f})=>{\n//     let _ref\n//     return(\n//         <div>\n//             <div>Ведите данные JSON: </div>\n//             <textarea ref={ta=>_ref=ta} onInput={()=>setCardsParseJSON(_ref.value)} name=\"comment\" cols=\"40\" rows=\"3\"></textarea>\n//         </div>\n//     )\n// }\n\n\nexport default InputField;","map":{"version":3,"sources":["/home/vm/simple_build_facebook/src/Components/InputField/index.js"],"names":["React","Component","PropTypes","InputField","constructor","props","getInputRef","node","textarea","state","strLog","isHide","onChange","bind","switchHide","setState","value","onSetCards","IsJsonString","json","JSON","parse","render","propTypes","strInput","string","bool","str","e"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport PropTypes from 'prop-types'\n\n//!!!НАДО ПЕРЕДЕЛАТЬ\nclass InputField extends Component{\n\n    constructor(props) {\n        super(props)\n        this.state={\n            //value:'',\n            strLog:'',\n            isHide:false,\n        }\n        this.onChange=this.onChange.bind(this)\n        this.switchHide=this.switchHide.bind(this)\n        //this.show=this.show.bind(this)\n    }\n\n    switchHide() {\n        const {isHide} = this.state\n        this.setState(!{isHide})\n    }\n\n    // show() {\n    //     const hidden = false\n    //     this.setState({hidden})\n    // }\n\n    static propTypes = {\n        strInput:PropTypes.string,\n        strLog:PropTypes.string,\n        isHide:PropTypes.bool\n    }\n\n    onChange(){\n        const {value} = this.textarea\n        const {onSetCards} = this.props\n        const {switchHide} = this\n        if(IsJsonString(value)){\n            const json = JSON.parse(value)\n            onSetCards(json)\n            switchHide();\n        }\n        else if(value!=='')\n        {\n            this.setState({strLog:'Не верный формат!'})\n        }\n        else\n            this.setState({strLog:''})     \n    }\n\n    getInputRef = (node)=>{this.textarea=node};\n\n    render(){\n        const {getInputRef, onChange, switchHide} = this\n        const {strLog, isHide} = this.state\n        return(\n            <div>\n                <div hidden={isHide}>\n                    <button onClick={switchHide}>Ввод данных</button>\n                </div>\n                <div hidden={!isHide}>\n                    <div>Ведите данные JSON: </div>\n                    <textarea ref={getInputRef} onInput={onChange} name=\"comment\" cols=\"40\" rows=\"3\"></textarea>\n                    <div>{strLog}</div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction IsJsonString(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n// Old Ver.\n//()=>setCardsParseJSON(this._ref.value)\n// const InputField = ({ setCardsParseJSON=f=>f})=>{\n//     let _ref\n//     return(\n//         <div>\n//             <div>Ведите данные JSON: </div>\n//             <textarea ref={ta=>_ref=ta} onInput={()=>setCardsParseJSON(_ref.value)} name=\"comment\" cols=\"40\" rows=\"3\"></textarea>\n//         </div>\n//     )\n// }\n    \n        \n\nexport default InputField"]},"metadata":{},"sourceType":"module"}