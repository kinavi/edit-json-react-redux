{"ast":null,"code":"var _jsxFileName = \"/home/vm/simple_build_facebook/src/Components/App.js\";\nimport React, { Component } from 'react';\nimport CardList from './CardList'; //\n\nimport userApi from '../Data/userApi.json';\nimport PropTypes from 'prop-types';\nimport InputField from './InputField';\nimport OutputField from './outputField';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: [],\n      isHide: false //strJSON:'',\n\n    }; //this.taRef = React.createRef();\n\n    this.removeCard = this.removeCard.bind(this);\n    this.setCards = this.setCards.bind(this);\n  } // static defaultProps={\n  //     cards:[],\n  //     isHide:false,\n  //     strLog:''\n  // }\n\n\n  setCards(card) {\n    const cards = this.state.cards;\n    if (Array.isArray(card)) this.setState({\n      cards: card\n    });else {\n      if (!IsConcatId(card, cards)) {\n        let newstate = [...cards, card];\n        this.setState({\n          cards: newstate\n        });\n      }\n    }\n  } // componentDidMount(){\n  //     console.log(this.refs._ref.value);\n  // }\n  // shouldComponentUpdate(nextState){\n  //     const { cards } = this.nextState\n  //     return cards !== nextState.cards\n  // }\n  // componentWillReceiveProps(nextProps){\n  // }\n  //Косяки!!!!! \n  // setCardsParseJSON(value){\n  //     if(IsJsonString(value)){\n  //         const newcards = JSON.parse(value)\n  //         const {cards} = this.state\n  //         if(Array.isArray(newcards))\n  //             this.setState({cards:newcards})\n  //         else\n  //         {\n  //             if(!IsConcatId(newcards,cards))\n  //             {\n  //                 let newstate = [...cards,newcards]\n  //                 this.setState({cards:newstate})\n  //             }\n  //         }\n  //     }\n  //     else if(value!=='')\n  //     {\n  //         this.setState({strLog:'Не верный формат!'})\n  //     }\n  //     else\n  //         this.setState({strLog:''})     \n  // }\n\n\n  removeCard(id) {\n    const cards = this.state.cards.filter(card => card.id !== id);\n    this.setState({\n      cards\n    });\n  }\n\n  render() {\n    const removeCard = this.removeCard,\n          setCards = this.setCards;\n    const _this$state = this.state,\n          cards = _this$state.cards,\n          strLog = _this$state.strLog; //const { _ta } = this.refs\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(InputField, {\n      onChange: setCards,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(CardList, {\n      list: cards,\n      onRemove: removeCard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Add user\"), React.createElement(OutputField, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }));\n  }\n\n}\n\nApp.propTypes = {\n  cards: PropTypes.array,\n  isHide: PropTypes.bool\n};\n\nfunction IsConcatId(obj, arr) {\n  for (let elem of arr) {\n    if (obj.id == elem.id) return true;\n  }\n\n  return false;\n}\n\nfunction IsJsonString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nexport default App;","map":{"version":3,"sources":["/home/vm/simple_build_facebook/src/Components/App.js"],"names":["React","Component","CardList","userApi","PropTypes","InputField","OutputField","App","constructor","props","state","cards","isHide","removeCard","bind","setCards","card","Array","isArray","setState","IsConcatId","newstate","id","filter","render","strLog","propTypes","array","bool","obj","arr","elem","IsJsonString","str","JSON","parse","e"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport CardList from './CardList'\n//\nimport userApi from '../Data/userApi.json'\nimport PropTypes from 'prop-types'\nimport InputField from './InputField'\nimport OutputField from './outputField'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cards: [],\n            isHide:false,\n            //strJSON:'',\n           \n        }\n        //this.taRef = React.createRef();\n        this.removeCard=this.removeCard.bind(this)\n        this.setCards=this.setCards.bind(this)\n    }\n\n    // static defaultProps={\n    //     cards:[],\n    //     isHide:false,\n    //     strLog:''\n    // }\n\n    static propTypes = {\n        cards:PropTypes.array,\n        isHide:PropTypes.bool\n        \n    }\n\n    setCards(card){\n        const {cards} = this.state\n        if(Array.isArray(card))\n            this.setState({cards:card})\n        else\n        {\n            if(!IsConcatId(card,cards))\n            {\n                let newstate = [...cards,card]\n                this.setState({cards:newstate})\n            }\n        }\n    }\n\n    // componentDidMount(){\n    //     console.log(this.refs._ref.value);\n    // }\n\n\n    // shouldComponentUpdate(nextState){\n    //     const { cards } = this.nextState\n    //     return cards !== nextState.cards\n    // }\n\n    // componentWillReceiveProps(nextProps){\n\n    // }\n\n    //Косяки!!!!! \n    // setCardsParseJSON(value){\n\n    //     if(IsJsonString(value)){\n    //         const newcards = JSON.parse(value)\n    //         const {cards} = this.state\n    //         if(Array.isArray(newcards))\n    //             this.setState({cards:newcards})\n    //         else\n    //         {\n    //             if(!IsConcatId(newcards,cards))\n    //             {\n    //                 let newstate = [...cards,newcards]\n    //                 this.setState({cards:newstate})\n    //             }\n                \n    //         }\n    //     }\n    //     else if(value!=='')\n    //     {\n    //         this.setState({strLog:'Не верный формат!'})\n    //     }\n    //     else\n    //         this.setState({strLog:''})     \n    // }\n\n    removeCard(id)\n    {\n        const cards = this.state.cards.filter(\n            card=>card.id !== id\n        )\n        this.setState({cards})\n    }\n\n    render() {\n        const {removeCard, setCards}=this\n        const { cards, strLog } = this.state\n        //const { _ta } = this.refs\n        return(\n            <div>\n                <InputField onChange={setCards}/>\n                \n                <CardList list={cards} onRemove={removeCard}/>\n                <button>Add user</button>\n                <OutputField/>\n            </div>\n            \n        )\n    }\n}\n\nfunction IsConcatId(obj,arr)\n{   \n    for (let elem of arr)\n    {\n        if(obj.id==elem.id)\n            return true\n    }\n        return false\n}\n\nfunction IsJsonString(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}