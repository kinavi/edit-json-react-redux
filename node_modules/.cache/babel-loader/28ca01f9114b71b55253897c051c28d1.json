{"ast":null,"code":"var _jsxFileName = \"/home/vm/simple_build_facebook/src/Components/App.js\";\nimport React, { Component } from 'react';\nimport CardList from './CardList'; //\n\nimport userApi from '../Data/userApi.json';\nimport PropTypes from 'prop-types';\nimport InputField from './InputField';\nimport OutputField from './outputField';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: [],\n      isHide: false //strJSON:'',\n\n    }; //this.taRef = React.createRef();\n\n    this.removeCard = this.removeCard.bind(this);\n    this.setCardsParseJSON = this.setCardsParseJSON.bind(this);\n  } // static defaultProps={\n  //     cards:[],\n  //     isHide:false,\n  //     strLog:''\n  // }\n\n\n  // componentDidMount(){\n  //     console.log(this.refs._ref.value);\n  // }\n  // shouldComponentUpdate(nextState){\n  //     const { cards } = this.nextState\n  //     return cards !== nextState.cards\n  // }\n  // componentWillReceiveProps(nextProps){\n  // }\n  //Косяки!!!!! \n  setCardsParseJSON(value) {\n    if (IsJsonString(value)) {\n      const newcards = JSON.parse(value);\n      const cards = this.state.cards;\n      if (Array.isArray(newcards)) this.setState({\n        cards: newcards\n      });else {\n        if (!IsConcatId(newcards, cards)) {\n          let newstate = [...cards, newcards];\n          this.setState({\n            cards: newstate\n          });\n        }\n      }\n    } else if (value !== '') {\n      this.setState({\n        strLog: 'Не верный формат!'\n      });\n    } else this.setState({\n      strLog: ''\n    });\n  }\n\n  removeCard(id) {\n    const cards = this.state.cards.filter(card => card.id !== id);\n    this.setState({\n      cards\n    });\n  }\n\n  render() {\n    const removeCard = this.removeCard,\n          setCardsParseJSON = this.setCardsParseJSON;\n    const _this$state = this.state,\n          cards = _this$state.cards,\n          strLog = _this$state.strLog; //const { _ta } = this.refs\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(InputField, {\n      setCardsParseJSON: setCardsParseJSON,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(CardList, {\n      list: cards,\n      onRemove: removeCard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Add user\"), React.createElement(OutputField, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }));\n  }\n\n}\n\nApp.propTypes = {\n  cards: PropTypes.array,\n  isHide: PropTypes.bool\n};\n\nfunction IsConcatId(obj, arr) {\n  for (let elem of arr) {\n    if (obj.id == elem.id) return true;\n  }\n\n  return false;\n}\n\nfunction IsJsonString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nexport default App;","map":{"version":3,"sources":["/home/vm/simple_build_facebook/src/Components/App.js"],"names":["React","Component","CardList","userApi","PropTypes","InputField","OutputField","App","constructor","props","state","cards","isHide","removeCard","bind","setCardsParseJSON","value","IsJsonString","newcards","JSON","parse","Array","isArray","setState","IsConcatId","newstate","strLog","id","filter","card","render","propTypes","array","bool","obj","arr","elem","str","e"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport CardList from './CardList'\n//\nimport userApi from '../Data/userApi.json'\nimport PropTypes from 'prop-types'\nimport InputField from './InputField'\nimport OutputField from './outputField'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cards: [],\n            isHide:false,\n            //strJSON:'',\n           \n        }\n        //this.taRef = React.createRef();\n        this.removeCard=this.removeCard.bind(this)\n        this.setCardsParseJSON=this.setCardsParseJSON.bind(this)\n    }\n\n    // static defaultProps={\n    //     cards:[],\n    //     isHide:false,\n    //     strLog:''\n    // }\n\n    static propTypes = {\n        cards:PropTypes.array,\n        isHide:PropTypes.bool\n        \n    }\n    // componentDidMount(){\n    //     console.log(this.refs._ref.value);\n    // }\n\n\n    // shouldComponentUpdate(nextState){\n    //     const { cards } = this.nextState\n    //     return cards !== nextState.cards\n    // }\n\n    // componentWillReceiveProps(nextProps){\n\n    // }\n\n    //Косяки!!!!! \n    setCardsParseJSON(value){\n\n        if(IsJsonString(value)){\n            const newcards = JSON.parse(value)\n            const {cards} = this.state\n            if(Array.isArray(newcards))\n                this.setState({cards:newcards})\n            else\n            {\n                if(!IsConcatId(newcards,cards))\n                {\n                    let newstate = [...cards,newcards]\n                    this.setState({cards:newstate})\n                }\n                \n            }\n        }\n        else if(value!=='')\n        {\n            this.setState({strLog:'Не верный формат!'})\n        }\n        else\n            this.setState({strLog:''})     \n    }\n\n    removeCard(id)\n    {\n        const cards = this.state.cards.filter(\n            card=>card.id !== id\n        )\n        this.setState({cards})\n    }\n\n    render() {\n        const {removeCard, setCardsParseJSON}=this\n        const { cards, strLog } = this.state\n        //const { _ta } = this.refs\n        return(\n            <div>\n                <InputField setCardsParseJSON={setCardsParseJSON}/>\n                \n                <CardList list={cards} onRemove={removeCard}/>\n                <button>Add user</button>\n                <OutputField/>\n            </div>\n            \n        )\n    }\n}\n\nfunction IsConcatId(obj,arr)\n{   \n    for (let elem of arr)\n    {\n        if(obj.id==elem.id)\n            return true\n    }\n        return false\n}\n\nfunction IsJsonString(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}