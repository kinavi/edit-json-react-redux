{"ast":null,"code":"var _jsxFileName = \"/home/vm/test_work/src/Components/App.js\";\nimport React, { Component } from 'react';\nimport CardList from './CardList';\nimport userApi from '../Data/userApi.json';\nimport PropTypes from 'prop-types';\nimport InputField from './InputField';\nimport OutputField from './outputField';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: userApi,\n      isHide: false,\n      freeId: 0,\n      lastId: 0\n    };\n    this.removeCard = this.removeCard.bind(this);\n    this.setCards = this.setCards.bind(this);\n    this.addCard = this.addCard.bind(this);\n    this.changeCard = this.changeCard.bind(this);\n    this.getFreeId = this.getFreeId.bind(this);\n    this.setLastId = this.setLastId.bind(this);\n    this.setFreeId = this.setFreeId.bind(this);\n  }\n\n  setCards(card) {\n    const addCard = this.addCard;\n    const cards = this.state.cards;\n    if (Array.isArray(card)) //тут косяк. Надо доплнять массив, а не подменять) \n      this.setState({\n        cards: card\n      });else {\n      if (!IsConcatId(card, cards)) addCard(card, cards);\n    }\n    this.setFreeId();\n  } // setLastId(){\n  //     const {cards, lastId} = this.state\n  //     if(cards.length>0)\n  //     {\n  //         let newlastId = cards.slice(-1)[0].id\n  //         console.log(`${newlastId} - Новый последний ID`)\n  //         console.log(`${this.state.lastId} - последний ID`)\n  //         console.log(`${{lastId}} - это мы отправляем`)\n  //         this.setState({lastId:newlastId})\n  //         console.dir(this.state.lastId)\n  //     }\n  // }\n  // componentWillUpdate(nextProps, nextState){\n  //     console.log('До обновления')\n  //     if(this.state.lastId!==nextState.lastId)\n  //         this.setLastId();\n  // }\n  // componentDidUpdate(){\n  //     console.log('После обновления')\n  //     this.setFreeId();\n  // }\n  // setFreeId(){\n  //     this.setLastId();\n  //     const {lastId, cards} = this.state\n  //     //console.dir(`${this.state} - setState`)\n  //     //console.dir(`${cards} - cards`)\n  //     console.log('setFreeId')\n  //     console.log(lastId)\n  //     let freeId = GeneratorId(lastId, cards)\n  //     console.log(freeId)\n  //     //console.dir(`${freeId} - freeId`)\n  //     this.setState({freeId})\n  // }\n  // getFreeId(){\n  //     const {freeId} = this.state\n  //     return freeId\n  // }\n\n\n  addCard(value, arr) {\n    this.setState({\n      cards: [...arr, value]\n    });\n    this.setFreeId();\n  }\n\n  changeCard(value) {\n    const cards = this.state.cards;\n\n    for (let card of cards) {\n      if (card.id === value.id) {\n        for (let key in card) {\n          card[key] = value[key];\n        }\n\n        this.setState({\n          cards\n        });\n      }\n    }\n\n    this.setFreeId();\n  }\n\n  removeCard(id) {\n    const cards = this.state.cards.filter(card => card.id !== id);\n    this.setState({\n      cards\n    });\n    this.setFreeId();\n  }\n\n  render() {\n    const removeCard = this.removeCard,\n          setCards = this.setCards,\n          changeCard = this.changeCard,\n          getFreeId = this.getFreeId;\n    const cards = this.state.cards;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(InputField, {\n      isHide: false,\n      onSetCards: setCards,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(CardList, {\n      fuAddCard: setCards,\n      list: cards,\n      onRemove: removeCard,\n      isHide: cards.length > 0 ? false : true,\n      Save: changeCard,\n      freeId: getFreeId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(OutputField, {\n      isHide: cards.length > 0 ? false : true,\n      value: cards,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }));\n  }\n\n}\n\nApp.propTypes = {\n  cards: PropTypes.array,\n  isHide: PropTypes.bool,\n  freeId: PropTypes.number,\n  lastId: PropTypes.number\n};\n\nfunction GeneratorId(lastId, cards) {\n  if (IsConcatId(++lastId, cards)) GeneratorId(+lastId);else return +lastId;\n}\n\nfunction IsConcatId(obj, cards) {\n  for (let elem of cards) {\n    if (typeof obj === 'object') {\n      if (obj.id === elem.id) return true;\n    } else {\n      if (obj === elem.id) return true;\n    }\n  }\n\n  return false;\n}\n\nexport default App;","map":{"version":3,"sources":["/home/vm/test_work/src/Components/App.js"],"names":["React","Component","CardList","userApi","PropTypes","InputField","OutputField","App","constructor","props","state","cards","isHide","freeId","lastId","removeCard","bind","setCards","addCard","changeCard","getFreeId","setLastId","setFreeId","card","Array","isArray","setState","IsConcatId","value","arr","id","key","filter","render","length","propTypes","array","bool","number","GeneratorId","obj","elem"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport CardList from './CardList'\nimport userApi from '../Data/userApi.json'\nimport PropTypes from 'prop-types'\nimport InputField from './InputField'\nimport OutputField from './outputField'\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cards: userApi,\n            isHide:false,\n            freeId:0,\n            lastId:0\n        }\n        this.removeCard=this.removeCard.bind(this)\n        this.setCards=this.setCards.bind(this)\n        this.addCard=this.addCard.bind(this)\n        this.changeCard=this.changeCard.bind(this)\n        this.getFreeId = this.getFreeId.bind(this)\n        this.setLastId = this.setLastId.bind(this)\n        this.setFreeId = this.setFreeId.bind(this)\n    }\n\n    static propTypes = {\n        cards:PropTypes.array,\n        isHide:PropTypes.bool,\n        freeId:PropTypes.number,\n        lastId:PropTypes.number\n    }\n\n    setCards(card){\n        const {addCard} = this\n        const {cards} = this.state\n        if(Array.isArray(card)) //тут косяк. Надо доплнять массив, а не подменять) \n            this.setState({cards:card})\n        else\n        {\n\n            if(!IsConcatId(card,cards))\n                addCard(card, cards)\n        }\n        this.setFreeId();\n    }\n\n    // setLastId(){\n    //     const {cards, lastId} = this.state\n    //     if(cards.length>0)\n    //     {\n    //         let newlastId = cards.slice(-1)[0].id\n    //         console.log(`${newlastId} - Новый последний ID`)\n    //         console.log(`${this.state.lastId} - последний ID`)\n    //         console.log(`${{lastId}} - это мы отправляем`)\n    //         this.setState({lastId:newlastId})\n    //         console.dir(this.state.lastId)\n    //     }\n        \n    // }\n\n    // componentWillUpdate(nextProps, nextState){\n    //     console.log('До обновления')\n    //     if(this.state.lastId!==nextState.lastId)\n    //         this.setLastId();\n    // }\n\n    // componentDidUpdate(){\n    //     console.log('После обновления')\n    //     this.setFreeId();\n    // }\n\n    // setFreeId(){\n    //     this.setLastId();\n\n    //     const {lastId, cards} = this.state\n    //     //console.dir(`${this.state} - setState`)\n    //     //console.dir(`${cards} - cards`)\n    //     console.log('setFreeId')\n    //     console.log(lastId)\n    //     let freeId = GeneratorId(lastId, cards)\n    //     console.log(freeId)\n    //     //console.dir(`${freeId} - freeId`)\n    //     this.setState({freeId})\n    // }\n\n    // getFreeId(){\n    //     const {freeId} = this.state\n    //     return freeId\n    // }\n\n    addCard(value, arr)\n    {\n        this.setState({cards:[...arr,value]})\n        this.setFreeId();\n    }\n\n    changeCard(value)\n    {\n        const {cards} = this.state\n\n        for (let card of cards)\n        {\n            if(card.id===value.id)\n            {\n                for (let key in card){\n                    card[key]=value[key]\n                }\n                this.setState({cards})\n            }\n        }\n        this.setFreeId();\n    }\n\n    removeCard(id)\n    {\n        const cards = this.state.cards.filter(\n            card=>card.id !== id\n        )\n        this.setState({cards})\n        this.setFreeId();\n    }\n\n    render() {\n        const {removeCard, setCards, changeCard,getFreeId}=this\n        const { cards } = this.state\n        return(\n            <div>\n                <InputField isHide={false} onSetCards={setCards}/>\n                <CardList fuAddCard = {setCards} list={cards} onRemove={removeCard} isHide={cards.length>0?false:true} Save = {changeCard} freeId = {getFreeId} />\n                <OutputField isHide={cards.length>0?false:true} value={cards}/>\n            </div>\n            \n        )\n    }\n}\n\nfunction GeneratorId(lastId, cards) {\n    if(IsConcatId(++lastId, cards))\n        GeneratorId(+lastId)\n    else return +lastId;\n}\n\nfunction IsConcatId(obj,cards)\n{  \n    for (let elem of cards)\n    {\n\n        if(typeof obj === 'object')\n        {\n            if(obj.id===elem.id)\n                return true\n        }  \n        else\n        {\n            if(obj===elem.id)\n                return true\n        }\n    }\n    return false\n}\n\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}