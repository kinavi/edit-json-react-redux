{"ast":null,"code":"var _jsxFileName = \"/home/vm/simple_build_facebook/src/Components/App.js\";\nimport React, { Component } from 'react';\nimport CardList from './CardList'; //\n\nimport userApi from '../Data/userApi.json';\nimport PropTypes from 'prop-types';\nimport InputField from './InputField';\nimport OutputField from './outputField';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: [],\n      isHide: false,\n      //strJSON:'',\n      strLog: ''\n    }; //this.taRef = React.createRef();\n\n    this.removeCard = this.removeCard.bind(this);\n    this.setCardsParseJSON = this.setCardsParseJSON.bind(this);\n  } // static defaultProps={\n  //     cards:[],\n  //     isHide:false,\n  //     strLog:''\n  // }\n\n\n  // componentDidMount(){\n  //     console.log(this.refs._ref.value);\n  // }\n  shouldComponentUpdate(nextProps) {\n    const cards = this.props.cards;\n    return cards !== nextProps.cards;\n  }\n\n  componentWillReceiveProps(nextProps) {} //Косяки!!!!! \n\n\n  setCardsParseJSON(value) {\n    //const {value} = this.refs._ref\n    //console.log(value);\n    if (IsJsonString(value)) {\n      const cards = JSON.parse(value); //console.log(cards);\n\n      if (Array.isArray(cards)) this.setState({\n        cards\n      });else {\n        const newcards = this.state.cards.push(cards);\n        this.setState({\n          cards: newcards\n        });\n      } //value=''\n    } else if (value !== '') {\n      this.setState({\n        strLog: 'Не верный формат!'\n      });\n    } else this.setState({\n      strLog: ''\n    });\n  }\n\n  removeCard(id) {\n    const cards = this.state.cards.filter(card => card.id !== id);\n    this.setState({\n      cards\n    });\n  }\n\n  render() {\n    const removeCard = this.removeCard,\n          setCardsParseJSON = this.setCardsParseJSON;\n    const _this$state = this.state,\n          cards = _this$state.cards,\n          strLog = _this$state.strLog; //const { _ta } = this.refs\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(InputField, {\n      setCardsParseJSON: setCardsParseJSON,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, strLog), React.createElement(CardList, {\n      list: cards,\n      onRemove: removeCard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Add user\"), React.createElement(OutputField, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }));\n  }\n\n}\n\nApp.propTypes = {\n  cards: PropTypes.array,\n  isHide: PropTypes.bool\n};\n\nfunction IsJsonString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nexport default App;","map":{"version":3,"sources":["/home/vm/simple_build_facebook/src/Components/App.js"],"names":["React","Component","CardList","userApi","PropTypes","InputField","OutputField","App","constructor","props","state","cards","isHide","strLog","removeCard","bind","setCardsParseJSON","shouldComponentUpdate","nextProps","componentWillReceiveProps","value","IsJsonString","JSON","parse","Array","isArray","setState","newcards","push","id","filter","card","render","propTypes","array","bool","str","e"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport CardList from './CardList'\n//\nimport userApi from '../Data/userApi.json'\nimport PropTypes from 'prop-types'\nimport InputField from './InputField'\nimport OutputField from './outputField'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cards: [],\n            isHide:false,\n            //strJSON:'',\n            strLog:''\n        }\n        //this.taRef = React.createRef();\n        this.removeCard=this.removeCard.bind(this)\n        this.setCardsParseJSON=this.setCardsParseJSON.bind(this)\n    }\n\n    // static defaultProps={\n    //     cards:[],\n    //     isHide:false,\n    //     strLog:''\n    // }\n\n    static propTypes = {\n        cards:PropTypes.array,\n        isHide:PropTypes.bool\n        \n    }\n    // componentDidMount(){\n    //     console.log(this.refs._ref.value);\n    // }\n\n\n    shouldComponentUpdate(nextProps){\n        const { cards } = this.props\n        return cards !== nextProps.cards\n    }\n\n    componentWillReceiveProps(nextProps){\n\n    }\n\n    //Косяки!!!!! \n    setCardsParseJSON(value){\n        //const {value} = this.refs._ref\n        //console.log(value);\n\n        if(IsJsonString(value)){\n            const cards = JSON.parse(value)\n            //console.log(cards);\n            if(Array.isArray(cards))\n                this.setState({cards})\n            else\n            {\n                const newcards = this.state.cards.push(cards)\n                this.setState({cards:newcards})\n            }\n                \n            //value=''\n        }\n        else if(value!=='')\n        {\n            this.setState({strLog:'Не верный формат!'})\n        }\n        else\n            this.setState({strLog:''})     \n    }\n\n    removeCard(id)\n    {\n        const cards = this.state.cards.filter(\n            card=>card.id !== id\n        )\n        this.setState({cards})\n    }\n\n    render() {\n        const {removeCard, setCardsParseJSON}=this\n        const { cards, strLog } = this.state\n        //const { _ta } = this.refs\n        return(\n            <div>\n                <InputField setCardsParseJSON={setCardsParseJSON}/>\n                <div>{strLog}</div>\n                <CardList list={cards} onRemove={removeCard}/>\n                <button>Add user</button>\n                <OutputField/>\n            </div>\n            \n        )\n    }\n}\n\nfunction IsJsonString(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}