{"ast":null,"code":"var _jsxFileName = \"/home/vm/\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438/test_work/src/Components/App.js\";\nimport React from 'react';\nimport CardList from './React/UsersList'; //import userApi from '../Data/userApi.json'\n//import PropTypes from 'prop-types'\n//import InputField from './InputField'\n\nimport OutputField from './React/outputField';\nimport AddUser from './React/AddUser';\n\nconst App = ({\n  store\n}) => React.createElement(\"div\", {\n  className: \"app\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, React.createElement(CardList, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}), React.createElement(OutputField, {\n  store: store,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}), React.createElement(AddUser, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}));\n\nexport default App; // class App extends Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             cards: userApi,\n//             isHide:false,\n//             //freeId:0,\n//             //lastId:0\n//         }\n//         this.removeCard=this.removeCard.bind(this)\n//         this.setCards=this.setCards.bind(this)\n//         this.addCard=this.addCard.bind(this)\n//         this.changeCard=this.changeCard.bind(this)\n//         //this.getFreeId = this.getFreeId.bind(this)\n//         //this.setLastId = this.setLastId.bind(this)\n//         //this.setFreeId = this.setFreeId.bind(this)\n//     }\n//     static propTypes = {\n//         cards:PropTypes.array,\n//         isHide:PropTypes.bool,\n//         freeId:PropTypes.number,\n//         lastId:PropTypes.number\n//     }\n//     setCards(card){\n//         const {addCard} = this\n//         const {cards} = this.state\n//         if(Array.isArray(card)) //тут косяк. Надо доплнять массив, а не подменять) \n//             this.setState({cards:card})\n//         else\n//         {\n//             if(!IsConcatId(card,cards))\n//                 addCard(card, cards)\n//         }\n//         //this.setFreeId();\n//     }\n//     // setLastId(){\n//     //     const {cards, lastId} = this.state\n//     //     if(cards.length>0)\n//     //     {\n//     //         let newlastId = cards.slice(-1)[0].id\n//     //         console.log(`${newlastId} - Новый последний ID`)\n//     //         console.log(`${this.state.lastId} - последний ID`)\n//     //         console.log(`${{lastId}} - это мы отправляем`)\n//     //         this.setState({lastId:newlastId})\n//     //         console.dir(this.state.lastId)\n//     //     }\n//     // }\n//     // componentWillUpdate(nextProps, nextState){\n//     //     console.log('До обновления')\n//     //     if(this.state.lastId!==nextState.lastId)\n//     //         this.setLastId();\n//     // }\n//     // componentDidUpdate(){\n//     //     console.log('После обновления')\n//     //     this.setFreeId();\n//     // }\n//     // setFreeId(){\n//     //     this.setLastId();\n//     //     const {lastId, cards} = this.state\n//     //     //console.dir(`${this.state} - setState`)\n//     //     //console.dir(`${cards} - cards`)\n//     //     console.log('setFreeId')\n//     //     console.log(lastId)\n//     //     let freeId = GeneratorId(lastId, cards)\n//     //     console.log(freeId)\n//     //     //console.dir(`${freeId} - freeId`)\n//     //     this.setState({freeId})\n//     // }\n//     // getFreeId(){\n//     //     const {freeId} = this.state\n//     //     return freeId\n//     // }\n//     addCard(value, arr)\n//     {\n//         this.setState({cards:[...arr,value]})\n//         //this.setFreeId();\n//     }\n//     changeCard(value)\n//     {\n//         const {cards} = this.state\n//         for (let card of cards)\n//         {\n//             if(card.id===value.id)\n//             {\n//                 for (let key in card){\n//                     card[key]=value[key]\n//                 }\n//                 this.setState({cards})\n//             }\n//         }\n//         //this.setFreeId();\n//     }\n//     removeCard(id)\n//     {\n//         const cards = this.state.cards.filter(\n//             card=>card.id !== id\n//         )\n//         this.setState({cards})\n//         //this.setFreeId();\n//     }\n//     render() {\n//         const {removeCard, setCards, changeCard}=this\n//         const { cards } = this.state\n//         return(\n//             <div>\n//                 <InputField isHide={false} onSetCards={setCards}/>\n//                 <CardList fuAddCard = {setCards} list={cards} onRemove={removeCard} isHide={cards.length>0?false:true} Save = {changeCard} /> {/*freeId = {getFreeId}*/} \n//                 <OutputField isHide={cards.length>0?false:true} value={cards}/>\n//             </div>\n//         )\n//     }\n// }\n// function GeneratorId(lastId, cards) {\n//     if(IsConcatId(++lastId, cards))\n//         GeneratorId(+lastId)\n//     else return +lastId;\n// }\n// function IsConcatId(obj,cards)\n// {  \n//     for (let elem of cards)\n//     {\n//         if(typeof obj === 'object')\n//         {\n//             if(obj.id===elem.id)\n//                 return true\n//         }  \n//         else\n//         {\n//             if(obj===elem.id)\n//                 return true\n//         }\n//     }\n//     return false\n// }\n//export default App;","map":{"version":3,"sources":["/home/vm/Загрузки/test_work/src/Components/App.js"],"names":["React","CardList","OutputField","AddUser","App","store"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,mBAArB,C,CACA;AACA;AACA;;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,OAAP,MAAoB,iBAApB;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACR;AAAK,EAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,EAEI,oBAAC,WAAD;AAAa,EAAA,KAAK,EAAEA,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFJ,EAGI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHJ,CADJ;;AASA,eAAeD,GAAfsourcesContent":["import React from 'react';\nimport CardList from './React/UsersList'\n//import userApi from '../Data/userApi.json'\n//import PropTypes from 'prop-types'\n//import InputField from './InputField'\nimport OutputField from './React/outputField'\nimport AddUser from './React/AddUser'\n\nconst App = ({ store }) =>\n    <div className=\"app\">\n        <CardList store={store}/>\n        <OutputField store={store}/>\n        <AddUser/>\n        {/* <SortMenu store={store} />\n        <AddColorForm store={store} />\n        <ColorList store={store} /> */}\n    </div>\nexport default App\n\n\n// class App extends Component {\n\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             cards: userApi,\n//             isHide:false,\n//             //freeId:0,\n//             //lastId:0\n//         }\n//         this.removeCard=this.removeCard.bind(this)\n//         this.setCards=this.setCards.bind(this)\n//         this.addCard=this.addCard.bind(this)\n//         this.changeCard=this.changeCard.bind(this)\n//         //this.getFreeId = this.getFreeId.bind(this)\n//         //this.setLastId = this.setLastId.bind(this)\n//         //this.setFreeId = this.setFreeId.bind(this)\n//     }\n\n//     static propTypes = {\n//         cards:PropTypes.array,\n//         isHide:PropTypes.bool,\n//         freeId:PropTypes.number,\n//         lastId:PropTypes.number\n//     }\n\n//     setCards(card){\n//         const {addCard} = this\n//         const {cards} = this.state\n//         if(Array.isArray(card)) //тут косяк. Надо доплнять массив, а не подменять) \n//             this.setState({cards:card})\n//         else\n//         {\n\n//             if(!IsConcatId(card,cards))\n//                 addCard(card, cards)\n//         }\n//         //this.setFreeId();\n//     }\n\n//     // setLastId(){\n//     //     const {cards, lastId} = this.state\n//     //     if(cards.length>0)\n//     //     {\n//     //         let newlastId = cards.slice(-1)[0].id\n//     //         console.log(`${newlastId} - Новый последний ID`)\n//     //         console.log(`${this.state.lastId} - последний ID`)\n//     //         console.log(`${{lastId}} - это мы отправляем`)\n//     //         this.setState({lastId:newlastId})\n//     //         console.dir(this.state.lastId)\n//     //     }\n        \n//     // }\n\n//     // componentWillUpdate(nextProps, nextState){\n//     //     console.log('До обновления')\n//     //     if(this.state.lastId!==nextState.lastId)\n//     //         this.setLastId();\n//     // }\n\n//     // componentDidUpdate(){\n//     //     console.log('После обновления')\n//     //     this.setFreeId();\n//     // }\n\n//     // setFreeId(){\n//     //     this.setLastId();\n\n//     //     const {lastId, cards} = this.state\n//     //     //console.dir(`${this.state} - setState`)\n//     //     //console.dir(`${cards} - cards`)\n//     //     console.log('setFreeId')\n//     //     console.log(lastId)\n//     //     let freeId = GeneratorId(lastId, cards)\n//     //     console.log(freeId)\n//     //     //console.dir(`${freeId} - freeId`)\n//     //     this.setState({freeId})\n//     // }\n\n//     // getFreeId(){\n//     //     const {freeId} = this.state\n//     //     return freeId\n//     // }\n\n//     addCard(value, arr)\n//     {\n//         this.setState({cards:[...arr,value]})\n//         //this.setFreeId();\n//     }\n\n//     changeCard(value)\n//     {\n//         const {cards} = this.state\n\n//         for (let card of cards)\n//         {\n//             if(card.id===value.id)\n//             {\n//                 for (let key in card){\n//                     card[key]=value[key]\n//                 }\n//                 this.setState({cards})\n//             }\n//         }\n//         //this.setFreeId();\n//     }\n\n//     removeCard(id)\n//     {\n//         const cards = this.state.cards.filter(\n//             card=>card.id !== id\n//         )\n//         this.setState({cards})\n//         //this.setFreeId();\n//     }\n\n//     render() {\n//         const {removeCard, setCards, changeCard}=this\n//         const { cards } = this.state\n//         return(\n//             <div>\n//                 <InputField isHide={false} onSetCards={setCards}/>\n//                 <CardList fuAddCard = {setCards} list={cards} onRemove={removeCard} isHide={cards.length>0?false:true} Save = {changeCard} /> {/*freeId = {getFreeId}*/} \n//                 <OutputField isHide={cards.length>0?false:true} value={cards}/>\n//             </div>\n            \n//         )\n//     }\n// }\n\n// function GeneratorId(lastId, cards) {\n//     if(IsConcatId(++lastId, cards))\n//         GeneratorId(+lastId)\n//     else return +lastId;\n// }\n\n// function IsConcatId(obj,cards)\n// {  \n//     for (let elem of cards)\n//     {\n\n//         if(typeof obj === 'object')\n//         {\n//             if(obj.id===elem.id)\n//                 return true\n//         }  \n//         else\n//         {\n//             if(obj===elem.id)\n//                 return true\n//         }\n//     }\n//     return false\n// }\n\n\n\n//export default App;"]},"metadata":{},"sourceType":"module"}