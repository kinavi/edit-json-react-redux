{"ast":null,"code":"var _jsxFileName = \"/home/vm/simple_build_facebook/src/Components/App.js\";\nimport React, { Component } from 'react';\nimport CardList from './CardList'; //\n\nimport userApi from '../Data/userApi.json';\nimport PropTypes from 'prop-types';\nimport InputField from './InputField';\nimport OutputField from './outputField';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: [],\n      isHide: false\n    };\n    this.removeCard = this.removeCard.bind(this);\n    this.setCards = this.setCards.bind(this);\n    this.addCard = this.addCard.bind(this);\n    this.changeCard = this.changeCard.bind(this);\n  }\n\n  setCards(card) {\n    const addCard = this.addCard;\n    const cards = this.state.cards;\n    if (Array.isArray(card)) //тут косяк. Надо доплнять массив, а не подменять) \n      this.setState({\n        cards: card\n      });else {\n      if (!IsConcatId(card, cards)) addCard(card, cards);\n    }\n  } // outputCard(){\n  //     const {cards} = this.state\n  // }\n  //JSON.stringify\n  // componentDidMount(){\n  //     console.log(this.refs._ref.value);\n  // }\n  // shouldComponentUpdate(nextState){\n  //     const { cards } = this.nextState\n  //     return cards !== nextState.cards\n  // }\n  // componentWillReceiveProps(nextProps){\n  // }\n\n\n  addCard(value, arr) {\n    this.setState({\n      cards: [...arr, value]\n    });\n  }\n\n  changeCard(value) {\n    const cards = this.state.cards;\n\n    for (let card of cards) {\n      if (card.id === value.id) {\n        for (let key in card) {\n          card[key] = value[key];\n        }\n      }\n    }\n  }\n\n  removeCard(id) {\n    const cards = this.state.cards.filter(card => card.id !== id);\n    this.setState({\n      cards\n    });\n  }\n\n  render() {\n    const removeCard = this.removeCard,\n          setCards = this.setCards,\n          changeCard = this.changeCard;\n    const _this$state = this.state,\n          cards = _this$state.cards,\n          strLog = _this$state.strLog; //const { _ta } = this.refs\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(InputField, {\n      isHide: false,\n      onSetCards: setCards,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(CardList, {\n      list: cards,\n      onRemove: removeCard,\n      isHide: cards.length > 0 ? false : true,\n      onSave: changeCard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(OutputField, {\n      isHide: cards.length > 0 ? false : true,\n      value: cards,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n  }\n\n}\n\nApp.propTypes = {\n  cards: PropTypes.array,\n  isHide: PropTypes.bool\n};\n\nfunction IsConcatId(obj, arr) {\n  for (let elem of arr) {\n    if (obj.id == elem.id) return true;\n  }\n\n  return false;\n}\n\nexport default App;","map":{"version":3,"sources":["/home/vm/simple_build_facebook/src/Components/App.js"],"names":["React","Component","CardList","userApi","PropTypes","InputField","OutputField","App","constructor","props","state","cards","isHide","removeCard","bind","setCards","addCard","changeCard","card","Array","isArray","setState","IsConcatId","value","arr","id","key","filter","render","strLog","length","propTypes","array","bool","obj","elem"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport CardList from './CardList'\n//\nimport userApi from '../Data/userApi.json'\nimport PropTypes from 'prop-types'\nimport InputField from './InputField'\nimport OutputField from './outputField'\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cards: [],\n            isHide:false\n        }\n        this.removeCard=this.removeCard.bind(this)\n        this.setCards=this.setCards.bind(this)\n        this.addCard=this.addCard.bind(this)\n        this.changeCard=this.changeCard.bind(this)\n    }\n\n    static propTypes = {\n        cards:PropTypes.array,\n        isHide:PropTypes.bool\n    }\n\n    setCards(card){\n        const {addCard} = this\n        const {cards} = this.state\n        if(Array.isArray(card)) //тут косяк. Надо доплнять массив, а не подменять) \n            this.setState({cards:card})\n        else\n        {\n            if(!IsConcatId(card,cards))\n                addCard(card, cards)\n        }\n    }\n\n    // outputCard(){\n    //     const {cards} = this.state\n    // }\n    //JSON.stringify\n\n    // componentDidMount(){\n    //     console.log(this.refs._ref.value);\n    // }\n\n\n    // shouldComponentUpdate(nextState){\n    //     const { cards } = this.nextState\n    //     return cards !== nextState.cards\n    // }\n\n    // componentWillReceiveProps(nextProps){\n\n    // }\n\n    addCard(value, arr)\n    {\n        this.setState({cards:[...arr,value]})\n    }\n\n    changeCard(value)\n    {\n        const {cards} = this.state\n\n        for (let card of cards)\n        {\n            if(card.id===value.id)\n            {\n                for (let key in card){\n                    card[key]=value[key]\n                }\n            }\n        }\n    }\n\n    removeCard(id)\n    {\n        const cards = this.state.cards.filter(\n            card=>card.id !== id\n        )\n        this.setState({cards})\n    }\n\n    render() {\n        const {removeCard, setCards, changeCard}=this\n        const { cards, strLog } = this.state\n        //const { _ta } = this.refs\n        return(\n            <div>\n                <InputField isHide={false} onSetCards={setCards}/>\n                <CardList list={cards} onRemove={removeCard} isHide={cards.length>0?false:true} onSave = {changeCard} />\n                <OutputField isHide={cards.length>0?false:true} value={cards}/>\n            </div>\n            \n        )\n    }\n}\n\nfunction IsConcatId(obj,arr)\n{   \n    for (let elem of arr)\n    {\n        if(obj.id==elem.id)\n            return true\n    }\n        return false\n}\n\n\n\nexport default App;"]},"metadata":{},"sourceType":"module"}